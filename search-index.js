crystal_doc_search_index_callback({"repository_name":"deepl-cli","body":"# DeepL CLI\n\nA simple command-line interface (CLI) tool for translating text using [DeepL API](https://www.deepl.com/pro-api/). This tool allows you to quickly and easily translate text via the command line without going to the [DeepL website](https://www.deepl.com/).\n\n## Requirements\n\n- [Crystal programming language](https://crystal-lang.org/)\n- [A DeepL API key](https://www.deepl.com/pro-api)\n\n## Installation\n\nCompiled binary versions of deepl-cli are uploaded to [GitHub Release](https://github.com/kojix2/deepl-cli/releases/latest).\n(Windows version is also uploaded but does not work properly)\n\n[Get a valid API key from DeepL](https://www.deepl.com/pro-api) and set it as an environment variable:\n\n```bash\nexport DEEPL_API_KEY=your_api_key_here\n```\n\n## Usage\n\nTo use the DeepL Translator CLI, simply run the `deepl` command followed by the arguments you wish to pass.\n\n```bash\n$ ./bin/deepl [arguments]\n```\n\n### Arguments\n\nOptions available for the CLI tool:\n\n- `-f, --from=LANG`: Set the source language (default: AUTO). Example: `-f EN`.\n- `-t, --to=LANG`: Set the target language (default: EN). Example: `-t ES`.\n- `-u, --usage`: Check Usage and Limits\n- `-v, --version`: Show the current version.\n- `-h, --help`: Show the help message.\n\n### Example\n\nTo translate the text \"Hola mundo\" from Spanish (ES) to English (EN):\n\n```bash\n$ ./bin/deepl --from ES --to EN \"Hola mundo\"\nHello world\n```\n\n```bash\n$ echo \"Hola mundo\" | ./bin/deepl --from ES --to EN\nHello world\n```\n\n## Contributing\n\nIf you would like to contribute to the development of this CLI tool, please follow the steps below:\n\n1. Fork this repository\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## License\n\nThis project is licensed under the MIT License.\n\nHappy translating!\n","program":{"html_id":"deepl-cli/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"deepl-cli","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"deepl-cli/Deepl","path":"Deepl.html","kind":"module","full_name":"Deepl","name":"Deepl","abstract":false,"locations":[{"filename":"src/deepl/translator.cr","line_number":4,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/translator.cr#L4"},{"filename":"src/deepl/version.cr","line_number":1,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/version.cr#L1"}],"repository_name":"deepl-cli","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"{{ (`shards version /home/runner/work/deepl-cli/deepl-cli/src/deepl`).chomp.stringify }}"}],"types":[{"html_id":"deepl-cli/Deepl/ApiKeyError","path":"Deepl/ApiKeyError.html","kind":"class","full_name":"Deepl::ApiKeyError","name":"ApiKeyError","abstract":false,"superclass":{"html_id":"deepl-cli/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"deepl-cli/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"deepl-cli/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"deepl-cli/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/deepl/translator.cr","line_number":5,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/translator.cr#L5"}],"repository_name":"deepl-cli","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"deepl-cli/Deepl","kind":"module","full_name":"Deepl","name":"Deepl"}},{"html_id":"deepl-cli/Deepl/RequestError","path":"Deepl/RequestError.html","kind":"class","full_name":"Deepl::RequestError","name":"RequestError","abstract":false,"superclass":{"html_id":"deepl-cli/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"deepl-cli/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"deepl-cli/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"deepl-cli/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/deepl/translator.cr","line_number":7,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/translator.cr#L7"}],"repository_name":"deepl-cli","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"deepl-cli/Deepl","kind":"module","full_name":"Deepl","name":"Deepl"}},{"html_id":"deepl-cli/Deepl/Translator","path":"Deepl/Translator.html","kind":"class","full_name":"Deepl::Translator","name":"Translator","abstract":false,"superclass":{"html_id":"deepl-cli/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"deepl-cli/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"deepl-cli/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/deepl/translator.cr","line_number":9,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/translator.cr#L9"}],"repository_name":"deepl-cli","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"API_BASE_URL","name":"API_BASE_URL","value":"\"https://api-free.deepl.com/v2\""},{"id":"API_TRANSLATE_URL","name":"API_TRANSLATE_URL","value":"\"#{API_BASE_URL}/translate\""}],"namespace":{"html_id":"deepl-cli/Deepl","kind":"module","full_name":"Deepl","name":"Deepl"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/deepl/translator.cr","line_number":15,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/translator.cr#L15"},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"get_translation(text,target_lang,source_lang)-instance-method","name":"get_translation","abstract":false,"args":[{"name":"text","external_name":"text","restriction":""},{"name":"target_lang","external_name":"target_lang","restriction":""},{"name":"source_lang","external_name":"source_lang","restriction":""}],"args_string":"(text, target_lang, source_lang)","args_html":"(text, target_lang, source_lang)","location":{"filename":"src/deepl/translator.cr","line_number":30,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/translator.cr#L30"},"def":{"name":"get_translation","args":[{"name":"text","external_name":"text","restriction":""},{"name":"target_lang","external_name":"target_lang","restriction":""},{"name":"source_lang","external_name":"source_lang","restriction":""}],"visibility":"Public","body":"params = [\"text=#{URI.encode_www_form(text)}\", \"target_lang=#{target_lang}\"]\nif source_lang == \"AUTO\"\nelse\n  params << \"source_lang=#{source_lang}\"\nend\nrequest_payload = params.join(\"&\")\nexecute_post_request(request_payload)\n"}},{"html_id":"request_languages(type)-instance-method","name":"request_languages","abstract":false,"args":[{"name":"type","external_name":"type","restriction":""}],"args_string":"(type)","args_html":"(type)","location":{"filename":"src/deepl/translator.cr","line_number":56,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/translator.cr#L56"},"def":{"name":"request_languages","args":[{"name":"type","external_name":"type","restriction":""}],"visibility":"Public","body":"begin\n  HTTP::Client.get(\"#{API_BASE_URL}/languages?type=#{type}\", headers: @http_headers)\nrescue ex\n  raise(RequestError.new(\"Error: #{ex.message}\"))\nend"}},{"html_id":"source_languages-instance-method","name":"source_languages","abstract":false,"location":{"filename":"src/deepl/translator.cr","line_number":69,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/translator.cr#L69"},"def":{"name":"source_languages","visibility":"Public","body":"begin\n  response = request_languages(\"source\")\n  parse_languages_response(response)\nrescue ex\n  raise(RequestError.new(\"Error: #{ex.message}\"))\nend"}},{"html_id":"target_languages-instance-method","name":"target_languages","abstract":false,"location":{"filename":"src/deepl/translator.cr","line_number":62,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/translator.cr#L62"},"def":{"name":"target_languages","visibility":"Public","body":"begin\n  response = request_languages(\"target\")\n  parse_languages_response(response)\nrescue ex\n  raise(RequestError.new(\"Error: #{ex.message}\"))\nend"}},{"html_id":"translate(text,target_lang,source_lang)-instance-method","name":"translate","abstract":false,"args":[{"name":"text","external_name":"text","restriction":""},{"name":"target_lang","external_name":"target_lang","restriction":""},{"name":"source_lang","external_name":"source_lang","restriction":""}],"args_string":"(text, target_lang, source_lang)","args_html":"(text, target_lang, source_lang)","location":{"filename":"src/deepl/translator.cr","line_number":46,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/translator.cr#L46"},"def":{"name":"translate","args":[{"name":"text","external_name":"text","restriction":""},{"name":"target_lang","external_name":"target_lang","restriction":""},{"name":"source_lang","external_name":"source_lang","restriction":""}],"visibility":"Public","body":"response = get_translation(text, target_lang, source_lang)\nparsed_response = JSON.parse(response.body)\nbegin\n  parsed_response.dig(\"translations\", 0, \"text\")\nrescue\n  raise(RequestError.new(\"Error: #{parsed_response}\"))\nend\n"}},{"html_id":"usage-instance-method","name":"usage","abstract":false,"location":{"filename":"src/deepl/translator.cr","line_number":80,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/translator.cr#L80"},"def":{"name":"usage","visibility":"Public","body":"begin\n  response = request_usage\n  parse_usage_response(response)\nrescue ex\n  raise(RequestError.new(\"Error: #{ex.message}\"))\nend"}}]}]},{"html_id":"deepl-cli/HTTP","path":"HTTP.html","kind":"module","full_name":"HTTP","name":"HTTP","abstract":false,"locations":[{"filename":"lib/http_proxy/src/ext/http/client.cr","line_number":3,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/lib/http_proxy/src/ext/http/client.cr#L3"},{"filename":"lib/http_proxy/src/http/proxy/client.cr","line_number":10,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/lib/http_proxy/src/http/proxy/client.cr#L10"},{"filename":"lib/http_proxy/src/http_proxy.cr","line_number":8,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/lib/http_proxy/src/http_proxy.cr#L8"},{"filename":"src/deepl/utils/proxy.cr","line_number":29,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/utils/proxy.cr#L29"}],"repository_name":"deepl-cli","program":false,"enum":false,"alias":false,"const":false,"doc":"Monkey-patch `HTTP::Client` to make it respect the `*_PROXY`\n  environment variables","summary":"<p>Monkey-patch <code><a href=\"HTTP/Client.html\">HTTP::Client</a></code> to make it respect the <code>*_PROXY</code>   environment variables</p>","types":[{"html_id":"deepl-cli/HTTP/Client","path":"HTTP/Client.html","kind":"class","full_name":"HTTP::Client","name":"Client","abstract":false,"superclass":{"html_id":"deepl-cli/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"deepl-cli/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"deepl-cli/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/http_proxy/src/ext/http/client.cr","line_number":4,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/lib/http_proxy/src/ext/http/client.cr#L4"},{"filename":"src/deepl/utils/proxy.cr","line_number":30,"url":"https://github.com/kojix2/deepl-cli/blob/539538e08f6d621831327d537e521169d0b6af0b/src/deepl/utils/proxy.cr#L30"}],"repository_name":"deepl-cli","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"deepl-cli/HTTP","kind":"module","full_name":"HTTP","name":"HTTP"},"doc":"An HTTP Client.\n\nNOTE: To use `Client`, you must explicitly import it with `require \"http/client\"`\n\n### One-shot usage\n\nWithout a block, an `HTTP::Client::Response` is returned and the response's body\nis available as a `String` by invoking `HTTP::Client::Response#body`.\n\n```\nrequire \"http/client\"\n\nresponse = HTTP::Client.get \"http://www.example.com\"\nresponse.status_code      # => 200\nresponse.body.lines.first # => \"<!doctype html>\"\n```\n\n### Parameters\n\nParameters can be added to any request with the `URI::Params.encode` method, which\nconverts a `Hash` or `NamedTuple` to a URL encoded HTTP query.\n\n```\nrequire \"http/client\"\n\nparams = URI::Params.encode({\"author\" => \"John Doe\", \"offset\" => \"20\"}) # => \"author=John+Doe&offset=20\"\nresponse = HTTP::Client.get URI.new(\"http\", \"www.example.com\", query: params)\nresponse.status_code # => 200\n```\n\n### Streaming\n\nWith a block, an `HTTP::Client::Response` body is returned and the response's body\nis available as an `IO` by invoking `HTTP::Client::Response#body_io`.\n\n```\nrequire \"http/client\"\n\nHTTP::Client.get(\"http://www.example.com\") do |response|\n  response.status_code  # => 200\n  response.body_io.gets # => \"<!doctype html>\"\nend\n```\n\n### Reusing a connection\n\nSimilar to the above cases, but creating an instance of an `HTTP::Client`.\n\n```\nrequire \"http/client\"\n\nclient = HTTP::Client.new \"www.example.com\"\nresponse = client.get \"/\"\nresponse.status_code      # => 200\nresponse.body.lines.first # => \"<!doctype html>\"\nclient.close\n```\n\nWARNING: A single `HTTP::Client` instance is not safe for concurrent use by multiple fibers.\n\n### Compression\n\nIf `compress` isn't set to `false`, and no `Accept-Encoding` header is explicitly specified,\nan HTTP::Client will add an `\"Accept-Encoding\": \"gzip, deflate\"` header, and automatically decompress\nthe response body/body_io.\n\n### Encoding\n\nIf a response has a `Content-Type` header with a charset, that charset is set as the encoding\nof the returned IO (or used for creating a String for the body). Invalid bytes in the given encoding\nare silently ignored when reading text content.","summary":"<p>An HTTP Client.</p>"}]}]}})