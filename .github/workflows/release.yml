name: release

on:
  push:
    tags:
      - "v*"

jobs:
  build_release:
    name: Build Release ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install Crystal
        uses: crystal-lang/install-crystal@v1
        with:
          crystal: latest

      - name: Run Linux Build
        if: matrix.os == 'ubuntu-latest'
        run: |
          docker run -d --name alpine -v $(pwd):/workspace -w /workspace crystallang/crystal:latest-alpine tail -f /dev/null
          docker exec alpine shards install --without-development --release --static
          docker exec alpine shards build --release --static
          docker exec alpine chmod +x bin/deepl

      - name: Run Mac Build x64
        if: matrix.os == 'macos-latest'
        run: |
          shards install --without-development --release
          shards build --release
          chmod +x bin/deepl

      - name: Run Windows Build x64
        if: matrix.os == 'windows-latest'
        run: |
          shards install --without-development --release
          shards build --release
          Set-ExecutionPolicy RemoteSigned -Scope Process
          
      - name: Upload Release Asset
        run: |
          cp bin/${{ matrix.os == 'windows-latest' && 'deepl.exe' || 'deepl' }} deepl-cli-${{ matrix.release_suffix }}
          gh release create ${{ env.VERSION }} -n "${{ env.MESSAGE }}" -t "${{ env.NAME }}" || true
          gh release upload ${{ env.VERSION }} deepl-cli-${{ matrix.release_suffix }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.ref_name }}
          MESSAGE: "WIP"
          NAME: ${{ github.ref_name }}

